name: CI

on:
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - uses: dorny/paths-filter@v2.10.2
        id: filter
        with:
          filters: |
            gpg: 'gpg/**'
            minidlna: 'minidlna/**'
            s3sync: 's3sync/**'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.images) }}
        # image:
        #   - repo: vladgh/gpg
        #     path: gpg
        #     platform: linux/amd64
        #     token: Sg_CkaULmDjZ0K3u5W1mIqXlkOk=
        #     version: '0.5.0'
        #   - repo: vladgh/minidlna
        #     path: minidlna
        #     platform: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
        #     token: Qr9rUtKpdDGoUVh3tGwGTBzSmQ8=
        #     version: '0.6.0'
        #   - repo: vladgh/s3sync
        #     path: s3sync
        #     platform: linux/amd64
        #     token: eB40MYq66N9GQvIisktwJVOL_tw=
        #     version: '0.5.0'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Set VARs
      #   run: |
      #     echo "VERSION=${{ matrix.image.version }}" >> $GITHUB_ENV
      #     echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
      #     echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV
      #     echo "GITHUB_EVENT=${{ github.event_name }}" >> $GITHUB_ENV
      #     echo "DOCKER_REPO=${{ matrix.image.repo }}" >> $GITHUB_ENV
      #     echo "DOCKER_PLATFORM=${{ matrix.image.platform }}" >> $GITHUB_ENV
      #     echo "DOCKER_BUILD_PATH=${{ matrix.image.path }}" >> $GITHUB_ENV
      #     echo "MICROBADGER_TOKEN=${{ matrix.image.token }}" >> $GITHUB_ENV
      # - name: Build/tag/push image
      #   run: |
      #     # Always tag with the short SHA of commit
      #     export DOCKER_TAGS="--tag ${DOCKER_REPO}:${GITHUB_SHA::8}"
      #     # Publish 'latest' and semantic tags only if pushing to 'main'
      #     if [[ "$GITHUB_REF" == 'refs/heads/main' && "$GITHUB_EVENT" == 'push' ]]; then
      #       export DOCKER_TAGS="${DOCKER_TAGS} --tag ${DOCKER_REPO}:latest"
      #       # Look for the version tag in the registry and if it does not exist, create all other semantic version tags for it
      #       if ! curl --fail --silent "https://hub.docker.com/v2/repositories/${DOCKER_REPO}/tags/${VERSION}/" >/dev/null; then
      #         IFS="." read -r -a semver <<< "$VERSION"
      #         export major="${semver[0]}" minor="${semver[1]}" patch="${semver[2]}"
      #         for version in "${major}.${minor}.${patch}" "${major}.${minor}" "${major}"; do
      #           export DOCKER_TAGS="${DOCKER_TAGS} --tag ${DOCKER_REPO}:${version}"
      #         done
      #       fi
      #     fi
      #     # Build/tag/push image
      #     eval docker buildx build --rm --pull --push \
      #       --build-arg VERSION="$VERSION" \
      #       --build-arg VCS_URL="$(git config --get remote.origin.url)" \
      #       --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
      #       --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
      #       --platform "${DOCKER_PLATFORM}" \
      #       "${DOCKER_TAGS}" \
      #       "${DOCKER_BUILD_PATH}"
      # - name: Notify MicroBadger
      #   run: |
      #     if [[ -n "$MICROBADGER_TOKEN" ]]; then
      #       curl --request POST --silent --fail "https://hooks.microbadger.com/images/${DOCKER_REPO}/${MICROBADGER_TOKEN}"
      #     fi
